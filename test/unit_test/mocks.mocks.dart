// Mocks generated by Mockito 5.4.6 from annotations
// in offline_service_booking/test/unit_test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:offline_service_booking/src/infrastructure/core/database_service.dart'
    as _i3;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseServices extends _i1.Mock implements _i3.DatabaseServices {
  MockDatabaseServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<_i2.Database> initDB() =>
      (super.noSuchMethod(
            Invocation.method(#initDB, []),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.method(#initDB, [])),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertData({
    required String? tableName,
    required Map<String, Object?>? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#insertData, [], {
              #tableName: tableName,
              #data: data,
            }),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getData({
    required String? tableName,
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getData, [], {
              #tableName: tableName,
              #where: where,
              #whereArgs: whereArgs,
            }),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<int> updateData({
    required String? tableName,
    required Map<String, Object?>? data,
    required String? where,
    required List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateData, [], {
              #tableName: tableName,
              #data: data,
              #where: where,
              #whereArgs: whereArgs,
            }),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteData({
    required String? tableName,
    required String? where,
    required List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteData, [], {
              #tableName: tableName,
              #where: where,
              #whereArgs: whereArgs,
            }),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
